{{- $data := newScratch -}} {{/* output data as JSON for use in viz */}}
{{- $data.Set "output" dict -}}
{{- $data.Set "years" slice -}}
{{- range .Site.Sections -}}	{{/* create new dict for this section */}}
	{{/* create page info dict with expected/required values */}}
	{{/* file basename without extension = slug = id */}}
	{{- $data.Set "sectionOutput" slice -}}
	{{- range .Pages -}}
		{{- $pageInfo := dict "url" .RelPermalink "id" .File.TranslationBaseName "display_date" .Params.display_date "sort_date" .Params.sort_date "html" (partial "leaf/article.html" (dict "context" .)) -}}
		{{/*convert tags to slug form */}}
		{{- $tags := slice -}} 		
		{{- range .Params.tags -}}
  		    {{- $tagSlug := partial "getTagSlug.html" . -}}
			{{- $tags = append $tags (slice ($tagSlug)) -}}
		{{- end -}}
		{{- $pageInfo = merge $pageInfo (dict "tags" $tags) -}}
		{{/* set optional values  */}}
		{{- with .Title -}}   		
			{{- $pageInfo = merge $pageInfo (dict "title" . ) -}}
		{{- end -}}
		{{- with .Params.display_title -}}
			{{- $pageInfo = merge $pageInfo (dict "display_title" . ) -}}
		{{- end -}}
		{{- with .Params.featured -}}
			{{- $pageInfo = merge $pageInfo (dict "featured" . ) -}}
		{{- end -}}
		{{/* if sort date is numeric, calculate century */}}
		{{- with .Params.sort_date -}} 		
			{{- if (findRE `^\d+` .) -}}
				{{- $pageInfo = merge $pageInfo (dict "century" (int (substr . 0 2))) -}}
			{{- end -}}
		{{- end -}}
		{{- with .Params.branch -}}
			{{ $pageInfo = merge $pageInfo (dict "branch" . ) -}}
		{{- end }}
		{{- $data.Add "years" .Params.sort_date -}}		{{/* collect all sort dates into an array */}}
		{{- $data.Add "sectionOutput" $pageInfo -}}
	{{- end -}}
	{{- $data.SetInMap "output" (lower .CurrentSection.Title) ($data.Get "sectionOutput") -}}
	{{- $years := sort ($data.Get "years") -}} 	{{/* add summary section with min/max year and number of leaves */}}
	{{- $stats := dict "minYear" (index $years  0) "maxYear" (index $years (sub (len $years) 1)) -}}
	{{- $stats := merge $stats (dict "numLeaves" (len $years)) -}}
	{{- $data.SetInMap "output" "stats" $stats -}}
{{- end -}}
{{/* include dedication html so we don't need to fetch it; leaf/article partial works well enough */}}
{{ with .Site.GetPage "/dedication" }}
	{{- $data.SetInMap "output"  "dedication" (dict "html" (partial "leaf/article.html" (dict "context" .))) -}}
{{ end }}
{{- $data.Get "output" | jsonify (dict "indent" "  ")  -}}